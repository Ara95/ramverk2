extend layout.pug

block main
    main
        :markdown-it(linkify langPrefix='highlight-')
            # Kmom01

            ## Berätta utförligt om din syn på Express och Pug och hur de samverkar. Relatera till andra ramverk du jobbat med. Lyft fram de fördelar och eventuellt nackdelar du finner, eller bara notera skillnader och likheter.

             Både Express och Pug är helt nya för mig,  jag har tidigare hört talas om Express men inte Pug. Det känns ändå ganska likt det vi gjorde med Mithril och JavaScript i tidigare kurs, alltså själva syntaxen men Pug känns verkligen annorlunda. Kommer nog ta ett tag att bli helt van med det eftersom det är ytterst udda känns det som. Då jag länge velat sätta mig in i JavaScript och lära mig mer om det så passar Express perfekt i denna kurs, enligt mig. Det enda jag kan se “negativt” är att Pug är annorlunda och det inte känns det mest ultimata sättet att använda sig utav.

             Det enda jag kan jämföra med är Anax. Men att jobba med Express så måste man använda sig utav att starta en server. Men när det kommer till routes och sånt så fungerar det väl på liknande sätt mellan dessa två ramverk.

            ## Berätta om din katalogstruktur och hur du organiserade din kod, hur tänkte du?

             Jag försökte att tänka på samma sätt som vi gjort i tidigare kurser och Anax där katalogstrukturen varit bra och man har fått anstränga sig lite mer än andra kurser då det finns mycket att hålla koll på. Så bästa sättet är att ha en ordentlig struktur där alla delar av koderna är strukturerade. Alltså så valde jag att göra det så likt strukturer vi jobbat med innan för det kändes bäst så.

            ## Använde du någon form av scaffolding som Express erbjuder?

             Jag använde mig utav express-generator när jag byggde upp min struktur till me sidan. Men jag la till det i efterhand och kommer förmodligen att använda mig utav det helt i framtida kursmoment. Eftersom jag redan hade strukturerat så blev det krångligt att göra om.

            ## Jobbar du med Markdown för innehållet, eller annat liknande?

            Jag har inte valt att jobba med det ännu, men har absolut funderat på det. Kommer förmodligen lägga in det i framtida kursmoment då jag tycker det är bekvämt att jobba med det.




            # Kmom02
            ## Har du jobbat med Docker eller andra virtualiseringstekniker innan?
            Jag har inte jobbat med själva Docker innan så det var helt nytt för mig. Men jag har tidigare jobbat med VirtualBox som vi gjorde i Linux kursen om jag inte minns fel. Det var inte så jättedjupt inom det vilket det känns samma inför detta kursmoment. Det jag ser som är bra med Docker är att man kan bygga saker utifrån det utan att behöva att det står och snurrar som VirtualBox direkt på datorn. Samt att bygga upp en miljö att jobba inte verkar inte heller så krångligt i Docker.

            ## Hur ser du på möjligheterna att använda dig av Docker för att jobba med tester av ditt repo?
            Man kan enkelt testa sina versioner av ett repo i olika containrar och sedan se skillnaderna och utveckling av sina repon. Man kan enkelt utveckla vidare på sin version utan större problem och allt flyter på lättare. Det verkar dock intressant att lära sig lite mer utav Docker, det kan nog vara användbart i framtiden att ändå veta något extra om det.

            ## Gick allt smidigt eller stötte du på problem?
            När jag först läste instruktionerna om uppgiften med Docker och själva artikeln så trodde jag att det skulle bli jättekrångligt med att få allt att fungera. Så var det verkligen inte, det enda jag var tvungen var att sätta igång Hyper-V som jag tidigare stängt av och sedan starta om datorn för att få Docker att fungera.

            ## Skapade du din egen image, berätta om den?

            Nej det gjorde jag tyvärr inte. Kände mest att jag ville avsluta det på god fot så jag inte skulle tröttna. Kommer nog med tiden att våga mig på att testa lite mer inom Docker.

            # Kmom03
            ## Berätta vilka tekniker/verktyg du valde för enhetstester och kodtäckning och varför?
            Eftersom jag fortfarande känner mig lite osäker på hur man ska välja som är bäst för en själv och vad som är bäst på vad så valde jag att gå enligt de som fanns i artikeln. Visst är det ett säkrare kort men det gav mig mest stöd i hela processen. När jag känner mig säker kanske jag kan testa på med annat och sedan jämföra vad som egentligen är bäst men för tillfället kör jag med Mocha och Nyc.

            ## Berätta om cin CI-kedja och reflektera över de valen du gjorde?
            AJag valde att jobba med Travis(byggtjänst) samt Scrutinizer. Scrutinizer som nämnt ganska mycket i gitterchatten(vad jag har sett) fångade mitt intresse då den kollar flera saker i ett(3 om jag inte minns fel?). Därför tycker jag att den var värd att ta med då den täcker flera fronter. Med kodtäckning så använde jag mig lite av codecov. Som jag nämnde tidigare så är det ganska nytt för mig att testa koden på detta sätt nytt för mig och känner mig riktigt inte vågad för mer än detta. Men det känns ändå som att jag har testat lite olika. Varför jag just valde dessa var att Travis såg vi på i tidigare kursmoment samt att Scrutinizer nämnts mycket innan och att det täcker många fronter. Resterande blev bara något val jag gjorde för att få det gjort.

            ## Reflektera över hur det gick att integrera enhetstesterna i olika Docker-kontainerns och om du ser någon nytta med detta.

            I början trodde jag det skulle bli klurigt att få till allt eftersom det strulade för mig i föregående kursmoment med docker av någon anledning. Men det gick ganska bra tycker jag, fick dock testa mig fram vid varje steg jag tog flera gånger för att inte förstöra något medans jag satte upp allt. Vilket hände i tidigare kursmoment.
            Om jag ser någon nytta av denna variant av test, det gör jag absolut. Man kan ganska enkelt testa olika versioner av en miljö(eller flera). Om man jobbar med något större arbete kanske man kan testa som jag skrev, på flera olika miljöer och lättare få fram framtida fel. Alltså kan man enkelt undvika att det sker buggar.


            ## Hur väl lyckades du utvärdera TDD-konceptet och vilka är dina reflektioner?

            Då jag inte har kommit så långt på min app så har jag ännu inte använt mig utav TDD-konceptet. Men jag förstår att det är ett bra sätt att använda sig utav då man från början kan få en testbar kod. Kommer förhoppningsvis att ge mig på det längre fram, om inte i denna kurs så blir det av i framtiden. Verkar som ett bra sätt att strukturera sitt arbete med tester.

            ## Berätta om tankarna kring din klient/server applikation och nämn de tekniker du använder.
            Så fort jag fick höra att vi skulle jobba med realtidsprogrammering så tänkte jag direkt på att jag ville göra en chatt. Samt att vi i kursmoment längre fram ska bygga en liten chatt också så det gjorde mitt beslut mycket lättare. För då har jag redan fått en grund från realtidsprogrammering och kan utgå därifrån. Jag har tänkt att bygga upp den som våran me-sida med en express-server samt klient vet jag inte riktigt ännu, funderar på att testa något nytt istället för PUG. Men det får jag fundera över innan nästa kmom.


            # Kmom04
            ## Är du ny på realtidsprogrammering eller har du gjort liknande tidigare?
            Detta var absolut första gången jag jobbar med realtidsprogrammering. Men jag har hört om det innan och det har tidigare verkat intressant. Eftersom det öppnar många dörrar och man kan utveckla så mycket mer än innan. Dock så var det lite krångligt i början som med alla andra tekniker vi jobbar med, mycket nya begrepp och så.

            ## Hur gick det att jobba med konceptet realtidsprogrammering i webben, några reflektioner?
            Jag tycker att gick bra att komma in i det. Artikeln vi skulle jobba igenom var en bra artikel där vi fick jobba med en chatt. Där vi kunde koppla upp oss samt se saker uppdateras direkt och därav bli en chatt. Häftigt att man kan jobba mot sin server på detta sätt.
            Jag har valt att göra en chatt där man ska kunna registrera sig samt logga in för att kunna använda, det ska vara ett stort chattrum. Har kollat runt lite och valt att använda mig utav sockets.io. Följer lite olika artiklar på nätet för att föra samman min chatt och se till att den fungerar.

            ## Berätta om din chatt som du integrerade i redovisa-sidan
            Appen jag integrerade i min me-sida är min huvudsakliga app, valde även att implementera databashentering direkt i detta kursmoment då jag såg att vi ska jobba med databaser i nästa kursmoment.
            Jag har en routes som ligger under routes som just hanterar alla mina olika routes. Allt från att huvudchatten, registrering samt inlogg. Använder mig av authenticate till både registrering av användare samt vid inlogg. Går den igenom så loggas man in till huvudchatten. Om det inte går igenom så skickas man tillbaka till startsidan. Har även en funktion som jag loopar direkt i min .EJS fil där jag loopar igenom min lista för users som är online och listar upp dem till sidan av chatten så man enkelt kan se vilka som är online.
            Istället för att använda mig utav React eller PUG som många gör så har jag valt att vända mig till EJS. Som gör så att jag kan hämta variablar från mina .js filer och använda dem samt att skriva javascript direkt i mina filer som sedan genereras till HTML.


            ## Berätta om den realtidsfunktionalitet du väljer att integrera i din klient/server applikation.
            Som jag nämnde ovan så är det en chatt som är byggd med EJS template. Varför jag valde att jobba med det är eftersom man kan kalla på variabler samt skriva JavaScript kod direkt i sina filer som sedan genereras till HTML.
            Använder mig också utav MongoDB som är min databas. Varför jag valde just MongoDB eftersom många jag kollat på ute på nätet använder det samt att artikeln använde samma. Också bestämt att använda mig utav sockets.io istället för websockets. Kan inte riktigt reflektera över varför men det känns som att sockets.io har ger dig en större möjlighet att kommunicera mot servern.


            # Kmom05
            ## Rubrik
            Another paragraph.


            # Kmom06
            ## Rubrik
            Another paragraph.


            # Kmom10
            ## Rubrik
            Another paragraph.
